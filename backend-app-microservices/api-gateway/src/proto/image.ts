// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: image.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleClientStreamingCall, type handleUnaryCall, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "image";

export interface UploadImageRequest {
  userId?: string | undefined;
  fileMetadata?: FileMetadata | undefined;
  fileChunks?: Uint8Array | undefined;
}

export interface UploadImageResponse {
  image?: Image | undefined;
  isNull?: boolean | undefined;
}

export interface FileMetadata {
  fieldname: string;
  originalname: string;
  encoding: string;
  mimetype: string;
  size: number;
}

/** Сообщение для запроса информации о последнем изображении */
export interface GetLastImageInfoRequest {
  userId: string;
}

export interface GetLastImageInfoResponse {
  image?: Image | undefined;
  isNull?: boolean | undefined;
}

/** Сообщение для обновления статуса изображения */
export interface UpdateImageStatusRequest {
  /** ID изображения */
  imageId: string;
  /** ID пользователя, которому принадлежит изображение */
  userId: string;
  /** Новый статус обработки изображения (UPLOADED, PROCESSING, COMPLETED, FAILED) */
  processingStatus: string;
}

export interface Image {
  id: string;
  originalName: string;
  generatedNameForOriginalsImage: string;
  generatedNameForProcessedImage: string;
  originalsImagePath: string;
  processedImagePath: string;
  processingStatus: string;
  createdAt: string;
  userId: string;
  size: number;
}

export interface GetOptimizedImageRequest {
  imageId: string;
}

export interface GetOptimizedImageResponse {
  optimizedImage?: Uint8Array | undefined;
  isNull?: boolean | undefined;
}

export const IMAGE_PACKAGE_NAME = "image";

function createBaseUploadImageRequest(): UploadImageRequest {
  return {};
}

export const UploadImageRequest: MessageFns<UploadImageRequest> = {
  encode(message: UploadImageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      writer.uint32(10).string(message.userId);
    }
    if (message.fileMetadata !== undefined) {
      FileMetadata.encode(message.fileMetadata, writer.uint32(18).fork()).join();
    }
    if (message.fileChunks !== undefined) {
      writer.uint32(26).bytes(message.fileChunks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadImageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileMetadata = FileMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileChunks = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUploadImageResponse(): UploadImageResponse {
  return {};
}

export const UploadImageResponse: MessageFns<UploadImageResponse> = {
  encode(message: UploadImageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.image !== undefined) {
      Image.encode(message.image, writer.uint32(10).fork()).join();
    }
    if (message.isNull !== undefined) {
      writer.uint32(16).bool(message.isNull);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadImageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadImageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.image = Image.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isNull = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFileMetadata(): FileMetadata {
  return { fieldname: "", originalname: "", encoding: "", mimetype: "", size: 0 };
}

export const FileMetadata: MessageFns<FileMetadata> = {
  encode(message: FileMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldname !== "") {
      writer.uint32(10).string(message.fieldname);
    }
    if (message.originalname !== "") {
      writer.uint32(18).string(message.originalname);
    }
    if (message.encoding !== "") {
      writer.uint32(26).string(message.encoding);
    }
    if (message.mimetype !== "") {
      writer.uint32(34).string(message.mimetype);
    }
    if (message.size !== 0) {
      writer.uint32(48).int32(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fieldname = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originalname = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encoding = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetLastImageInfoRequest(): GetLastImageInfoRequest {
  return { userId: "" };
}

export const GetLastImageInfoRequest: MessageFns<GetLastImageInfoRequest> = {
  encode(message: GetLastImageInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLastImageInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLastImageInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetLastImageInfoResponse(): GetLastImageInfoResponse {
  return {};
}

export const GetLastImageInfoResponse: MessageFns<GetLastImageInfoResponse> = {
  encode(message: GetLastImageInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.image !== undefined) {
      Image.encode(message.image, writer.uint32(10).fork()).join();
    }
    if (message.isNull !== undefined) {
      writer.uint32(16).bool(message.isNull);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLastImageInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLastImageInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.image = Image.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isNull = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateImageStatusRequest(): UpdateImageStatusRequest {
  return { imageId: "", userId: "", processingStatus: "" };
}

export const UpdateImageStatusRequest: MessageFns<UpdateImageStatusRequest> = {
  encode(message: UpdateImageStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.processingStatus !== "") {
      writer.uint32(26).string(message.processingStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateImageStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateImageStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.processingStatus = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseImage(): Image {
  return {
    id: "",
    originalName: "",
    generatedNameForOriginalsImage: "",
    generatedNameForProcessedImage: "",
    originalsImagePath: "",
    processedImagePath: "",
    processingStatus: "",
    createdAt: "",
    userId: "",
    size: 0,
  };
}

export const Image: MessageFns<Image> = {
  encode(message: Image, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.originalName !== "") {
      writer.uint32(18).string(message.originalName);
    }
    if (message.generatedNameForOriginalsImage !== "") {
      writer.uint32(26).string(message.generatedNameForOriginalsImage);
    }
    if (message.generatedNameForProcessedImage !== "") {
      writer.uint32(34).string(message.generatedNameForProcessedImage);
    }
    if (message.originalsImagePath !== "") {
      writer.uint32(42).string(message.originalsImagePath);
    }
    if (message.processedImagePath !== "") {
      writer.uint32(50).string(message.processedImagePath);
    }
    if (message.processingStatus !== "") {
      writer.uint32(58).string(message.processingStatus);
    }
    if (message.createdAt !== "") {
      writer.uint32(66).string(message.createdAt);
    }
    if (message.userId !== "") {
      writer.uint32(74).string(message.userId);
    }
    if (message.size !== 0) {
      writer.uint32(80).int32(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Image {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originalName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.generatedNameForOriginalsImage = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.generatedNameForProcessedImage = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.originalsImagePath = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.processedImagePath = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.processingStatus = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetOptimizedImageRequest(): GetOptimizedImageRequest {
  return { imageId: "" };
}

export const GetOptimizedImageRequest: MessageFns<GetOptimizedImageRequest> = {
  encode(message: GetOptimizedImageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOptimizedImageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOptimizedImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetOptimizedImageResponse(): GetOptimizedImageResponse {
  return {};
}

export const GetOptimizedImageResponse: MessageFns<GetOptimizedImageResponse> = {
  encode(message: GetOptimizedImageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.optimizedImage !== undefined) {
      writer.uint32(10).bytes(message.optimizedImage);
    }
    if (message.isNull !== undefined) {
      writer.uint32(16).bool(message.isNull);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOptimizedImageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOptimizedImageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.optimizedImage = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isNull = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface ImageServiceClient {
  uploadImage(request: Observable<UploadImageRequest>): Observable<UploadImageResponse>;

  getLastImageInfo(request: GetLastImageInfoRequest): Observable<GetLastImageInfoResponse>;

  getOptimizedImage(request: GetOptimizedImageRequest): Observable<GetOptimizedImageResponse>;
}

export interface ImageServiceController {
  uploadImage(
    request: Observable<UploadImageRequest>,
  ): Promise<UploadImageResponse> | Observable<UploadImageResponse> | UploadImageResponse;

  getLastImageInfo(
    request: GetLastImageInfoRequest,
  ): Promise<GetLastImageInfoResponse> | Observable<GetLastImageInfoResponse> | GetLastImageInfoResponse;

  getOptimizedImage(
    request: GetOptimizedImageRequest,
  ): Promise<GetOptimizedImageResponse> | Observable<GetOptimizedImageResponse> | GetOptimizedImageResponse;
}

export function ImageServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getLastImageInfo", "getOptimizedImage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ImageService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["uploadImage"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ImageService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const IMAGE_SERVICE_NAME = "ImageService";

export type ImageServiceService = typeof ImageServiceService;
export const ImageServiceService = {
  uploadImage: {
    path: "/image.ImageService/UploadImage",
    requestStream: true,
    responseStream: false,
    requestSerialize: (value: UploadImageRequest) => Buffer.from(UploadImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UploadImageRequest.decode(value),
    responseSerialize: (value: UploadImageResponse) => Buffer.from(UploadImageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UploadImageResponse.decode(value),
  },
  getLastImageInfo: {
    path: "/image.ImageService/GetLastImageInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetLastImageInfoRequest) => Buffer.from(GetLastImageInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetLastImageInfoRequest.decode(value),
    responseSerialize: (value: GetLastImageInfoResponse) =>
      Buffer.from(GetLastImageInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetLastImageInfoResponse.decode(value),
  },
  getOptimizedImage: {
    path: "/image.ImageService/GetOptimizedImage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOptimizedImageRequest) => Buffer.from(GetOptimizedImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetOptimizedImageRequest.decode(value),
    responseSerialize: (value: GetOptimizedImageResponse) =>
      Buffer.from(GetOptimizedImageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetOptimizedImageResponse.decode(value),
  },
} as const;

export interface ImageServiceServer extends UntypedServiceImplementation {
  uploadImage: handleClientStreamingCall<UploadImageRequest, UploadImageResponse>;
  getLastImageInfo: handleUnaryCall<GetLastImageInfoRequest, GetLastImageInfoResponse>;
  getOptimizedImage: handleUnaryCall<GetOptimizedImageRequest, GetOptimizedImageResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
